- - - - - - - - - - - - - - - time: 0 - - - - - - - - - - - - - - - 

> phase 1: incoming spikes

>> no events during phase 1

> phase 2: showing starting state

>> 1: <2/0>
>> 2: <1/0>
>> 3: <3/0>
>> env_{out}: []

> phase 3: selecting rules

>> 1: Rule(regex='^a{2}$', consumed=1, produced=1, delay=0)
>> 2: Rule(regex='^a$', consumed=1, produced=1, delay=0)
>> 3: Rule(regex='^a{3}$', consumed=3, produced=1, delay=0)

> phase 4: accumulating updates, detecting outputs

>> no events during phase 4

>> detected first output spike

> phase 5: showing in-between state

>> 1: <1/0>
>> 2: <0/0>
>> 3: <0/0>
>> env_{out}: [1]

- - - - - - - - - - - - - - - time: 1 - - - - - - - - - - - - - - - 

> phase 1: incoming spikes

>> 1: 1
>> 2: 1
>> 3: 2

> phase 2: showing starting state

>> 1: <2/0>
>> 2: <1/0>
>> 3: <2/0>
>> env_{out}: [1]

> phase 3: selecting rules

>> 1: Rule(regex='^a{2}$', consumed=1, produced=1, delay=0)
>> 2: Rule(regex='^a$', consumed=1, produced=1, delay=0)
>> 3: Rule(regex='^a{2}$', consumed=2, produced=0, delay=0)

> phase 4: accumulating updates, detecting outputs

>> no events during phase 4

> phase 5: showing in-between state

>> 1: <1/0>
>> 2: <0/0>
>> 3: <0/0>
>> env_{out}: [1, 0]

- - - - - - - - - - - - - - - time: 2 - - - - - - - - - - - - - - - 

> phase 1: incoming spikes

>> 1: 1
>> 2: 1
>> 3: 2

> phase 2: showing starting state

>> 1: <2/0>
>> 2: <1/0>
>> 3: <2/0>
>> env_{out}: [1, 0]

> phase 3: selecting rules

>> 1: Rule(regex='^a{2}$', consumed=1, produced=1, delay=0)
>> 2: Rule(regex='^a$', consumed=1, produced=1, delay=1)
>> 3: Rule(regex='^a{2}$', consumed=2, produced=0, delay=0)

> phase 4: accumulating updates, detecting outputs

>> no events during phase 4

> phase 5: showing in-between state

>> 1: <1/0>
>> 2: <0/0>
>> 3: <0/0>
>> env_{out}: [1, 0, 0]

- - - - - - - - - - - - - - - time: 3 - - - - - - - - - - - - - - - 

> phase 1: incoming spikes

>> 3: 1

> phase 2: showing starting state

>> 1: <1/0>
>> 2: <0/0>
>> 3: <1/0>
>> env_{out}: [1, 0, 0]

> phase 3: selecting rules

>> 1: Rule(regex='^a$', consumed=1, produced=0, delay=0)
>> 3: Rule(regex='^a$', consumed=1, produced=1, delay=1)

> phase 4: accumulating updates, detecting outputs

>> no events during phase 4

> phase 5: showing in-between state

>> 1: <0/0>
>> 2: <0/0>
>> 3: <0/0>
>> env_{out}: [1, 0, 0, 0]

- - - - - - - - - - - - - - - time: 4 - - - - - - - - - - - - - - - 

> phase 1: incoming spikes

>> 1: 1
>> env_{out}: 1

> phase 2: showing starting state

>> 1: <1/0>
>> 2: <0/0>
>> 3: <0/0>
>> env_{out}: [1, 0, 0, 0]

> phase 3: selecting rules

>> 1: Rule(regex='^a$', consumed=1, produced=0, delay=0)

> phase 4: accumulating updates, detecting outputs

>> no events during phase 4

>> detected second output spike, wrapping up...

